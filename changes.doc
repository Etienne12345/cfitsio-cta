               Log of Changes Made to CFITSIO

   - added new funtion to support template files when creating new FITS files.

   - support the TCROTn WCS keyword in tables, when reading the WCS keywords.

   - modified the iterator to support null values in logical columns in
     binary tables.

   - fixed bug in iterator to support null values in integer columns in
     ASCII tables.

   - changed the values for FLOATNULLVALUE and DOUBLENULLVALUE to make them
     less likely to duplicate actual values in the data.

   - fixed major bug when freeing memory in the iterator function.  It caused
     mysterious crashes on a few platforms, but had no effect on most others.

   - added support for reading IRAF format image (.imh files)

   - added more error checking to return an error if the size of the FITS
     file exceeds the largest value of a long integer (2.1 GB on 32-bit
     platforms).

   - CFITSIO now will automatically insert space for additional table rows
     or add space to the data heap, if one writes beyond the current end
     of the table or heap.  This prevents any HDUs which might follow
     the current HDU from being overwritten.  It is thus no longer necessary
     to explicitly call fits_insert_rows before writing new rows of data
     to the FITS file.

   - CFITSIO now automatically keeps track of the number of rows that have
     been written to a FITS table, and updates the NAXIS2 keyword accordingly
     when the table is closed.  It is no longer necessary for the application
     program to updated NAXIS2.  

   - When reading from a FITS table, CFITSIO will now return an error if the
     application tries to read beyond the end of the table. 

   - added 2 routines to get the number of rows or columns in a table.

   - improved the undocumented feature that allows a '20A' column to be
     read as though it were a '20B' column by fits_read_col_byt.  

   - added overflow error checking when reading keywords.  Previously, the
     returned value could be silently truncated to the maximum allowed value
     for that data type.  Now an error status is returned whenever an 
     overflow occurs.

   - added new set of routines dealing with hierarchical groups of files.
     These were provided by Don Jennings of the INTEGRAL Science Data Center.

   - added new URL parsing routines.

   - changed the calling sequence to ffghad (get HDU address) from
     ffghad(fitsfile *fptr, > long *headstart, long *dataend) to
     ffghad(fitsfile *fptr, > long *headstart, long datastart, 
            long *dataend, int *status) 

   - major modification to support opening the same FITS file more
     than once.  Now one can open the same file multiple times and
     read and write simulataneously to different HDUs within the file.
     fits_open_file automatically detects if the file is already opened.

   - added the ability to clobber/overwrite an existing file
     with the same name when creating a new output file.  Just
     preceed the output file name with '!' (an exclamation mark)

   - changed the ffpdat routine which writes the DATE keyword
     to use the new 'YYYY-MM-DDThh:mm:ss' format.

   - added several new routines to create or parse the new date/time
     format string.

   - changed ifdef for DECFortran in f77_wrap.h and f77_wrap1.c:
     expanded to recognize Linux/Alpha

   - added new lexical parsing routines (from Peter Wilson):
     eval_l.c, eval_y.c, eval_f.c, eval_defs.h, and eval_tab.h.
     These are used when doing on-the-fly table row selections.

   - added new family of routines to support reading and writing
     'unsigned int' data type values in keywords, images or tables.

   - restructured all the putcol and getcol routines to provide
     simpler and more robust support for machines which have
     sizeof(long) = 8.  Defined a new datatype INT32BIT which is
     always 32 bits long (platform independent) and is used internally
     in CFITSIO when reading or writing BITPIX = 32 images or 'J'
     columns.  This eliminated the need for specialize routines like
     ffswaplong, ffunswaplong, and ffpacklong.

   - overhauled cfileio.c (and other files) to use loadable drivers for
     doing data I/O to different devices.  Now CFITSIO support network 
     access to ftp:// and http:// files, and to shared memory files.

   - removed the ffsmem routine and replaced it with ffomem.  This will
     only affect software that reads an existing file in core memory.
     (written there by some other process).

   - modified all the ffgkn[] routines (get an array of keywords) so
     that the 'nfound' parameter is = the number of keywords returned,
     not the highest index value on the returned keywords.  This makes
     no difference if the starting index value to look for = 1.
     This change is not backward compatible with previous versions
     of CFITSIO, but is the way that FITSIO behaved.

   - added new error code = 1 for any application error external
     to CFITSIO.  Also reports "unknown error status" if the
     value doesn't match a known CFITSIO error.

Version 1.42 - 30 April 1998 (included in FTOOLS 4.1 release)

   - modified the routines which read a FITS float values into
     a float array, or read FITS double values into a double array,
     so that the array value is also explicitly set in addition
     to setting the array of flag values, if the FITS value is a NaN.
     This ensures that no NaN values get passed back to the calling
     program, which can cause serious problems on some platforms (OSF).

   - added calls to ffrdef at the beginning of the insert
     or delete rows or columns routines in editcol.c to make sure
     that CFITSIO has correctly initialized the HDU information.

   - added new routine ffdrws to delete a list of rows in a table

   - added ffcphd to copy the header keywords from one hdu to another

   - made the anynul parameter in the ffgcl* routines optional
     by first checking to see if the pointer is not null before
     initializing it.

   - modified ffbinit and ffainit to ignore minor format
     errors in header keywords so that cfitsio can at least
     move to an extension that contains illegal keywords.

   - modified all the ffgcl* routines to simply return without
     error if nelem = 0.

   - added check to ffclose to check the validity of the fitsfile
     pointer before closing it.  This should prevent program crashes
     when someone tries to close the same file more than once.

   - replaced calls to strcmp and strncmp with macros FSTRCMP and
     FSTRNCMP in a few places to improve performance when reading
     header keywords (suggested by Mike Noble)

  Bug Fixes:

   - fixed typo in macro definition of error 504 in the file fitsio.h.

   - in ffopen, reserved space for 4 more characters in the input
     file name in case a '.zip' suffix needs to be added.

   - small changes to ffpclx to fix problems when writing bit (X) data
     columns beyond the current end of file.

   - fixed small bug in ffcrhd where a dummy pointer was not initialized

   - initialized the dummy variable in ffgcfe and ffgcfd which
     was causing crashes under OSF in some cases.

   - increased the length of the allocated string ffgkls by 2
     to support the case of reading a numeric keyword as a string
     which doesn't have the enclosing quote characters.

Version 1.4 - 6 Feb 1998 

   - major restructuring of the CFITSIO User's Guide

   - added the new 'iterator' function.  The fortran wrapper is
     in f77_iter.c for now.

   - enhanced ffcrtb so that it writes a dummy primary array
     if none currently exists before appending the table.

   - removed the ffgcl routine and replaced it with ffgcvl 

   - modified ffpcnl to just take a single input null value instead
     of an entire array of null value flags.

   - modified ffcmps and ffgnxk so that, for example, the string 'rate' 
     is not considered a match to the string 'rate2', and 'rate*'
     is a match to the string 'rate'.

   - modified ffgrsz to also work with images, in which case
     it returns the optimum number of pixels to process at
     one time.

   - modified ffgthd to support null valued keywords

   - added a new source file 'f77_wrap.c' that includes all the
     Fortran77 wrapper routines for calling CFITSIO.  This will
     eventually replace the Fortran FITSIO library.

   - added new routines:
     ffppn - generic write primary array with null values
     ffpprn - write null values to primary array

     ffuky - 'update' a keyword value, with any specified datatype.

     ffrprt - write out report of error status and error messages
     ffiter - apply a user function iteratively to all the rows of a table
     ffpkyc - write complex-valued keyword
     ffpkym - write double complex-valued keyword
     ffpkfc - write complex-valued keyword in fixed format
     ffpkfm - write double complex-valued keyword in fixed format

     ffgkyc - read complex-valued keyword
     ffgkym - read double complex-valued keyword

     ffmkyc - modify complex-valued keyword
     ffmkym - modify double complex-valued keyword
     ffmkfc - modify complex-valued keyword in fixed format
     ffmkfm - modify double complex-valued keyword in fixed format

     ffukyc - update complex-valued keyword
     ffukym - update double complex-valued keyword
     ffukfc - update complex-valued keyword in fixed format
     ffukfm - update double complex-valued keyword in fixed format

     ffikyc - insert complex-valued keyword
     ffikym - insert double complex-valued keyword
     ffikfc - insert complex-valued keyword in fixed format
     ffikfm - insert double complex-valued keyword in fixed format

     ffpktp - write or modify keywords using ASCII template file
     ffcpcl - copy a column from one table to another
     ffcpky - copy an indexed keyword from one HDU to another
     ffpcnl - write logical values, including nulls, to binary table
     ffpcns - write string values,  including nulls, to table
     ffmnhd - move to HDU with given exttype, EXTNAME and EXTVERS values
     ffthdu - return the total number of HDUs in the file
     ffghdt - return the type of the  CHDU
     ffflnm - return the name of the open FITS file
     ffflmd - return the mode of the file (READONLY or READWRITE)

   - modified ffmahd and ffmrhd (to move to a new extension) so that
     a null pointer may be given for the returned HDUTYPE argument.

   - worked around a bug in the Mac CWpro2 compiler by changing all
     the statements like "#if BYTESWAPPED == TRUE" to "if BYTESWAPPED".

   - modified ffitab (insert new ASCII table) to allow tables with
     zero number of columns

   - modified Makefile.in and configure to define the -Dg77Fortran
     CFLAGS variable on Linux platforms.  This is needed to 
     compile the new f77_wrap.c file (which includes cfortran.h)

  Bug Fixes:

   - fixed small bug in ffgrz (get optimum row size) which sometimes
     caused it to return slightly less than the maximum optimum size.
     This bug would have done no harm to application programs.

   - fixed bug in ffpclk and ffgclk to add an 'else' case
     if size of int is not equal to size of short or size of long.

   - added test to ffgkls to check if the input string is not null before
     allocating memory for it.

Version 1.32 - 21 November 1997 (internal release only)

   - fixed bug in the memory deallocation (free) statements
     in the ffopen routine in the cfileio.c file.

   - modified ffgphd to tolerate minor violations of the FITS 
     standard in the format of the XTENSION = 'IMAGE   '
     keyword when reading FITS files.  Extra trailing spaces
     are now allowed in the keyword value.  (FITS standard
     will be changed so that this is not a violation).

Version 1.31 - 4 November 1997 (internal release only)

  Enhancements:

   - added support for directly reading compressed FITS files
     by copying the algorithms from the gzip program. This 
     supports the Unix compress, gzip and pkzip algorithms.

   - modified ffiimg, ffitab, and ffibin (insert HDUs into
     a FITS file) so that if the inserted HDU is at the end of
     the FITS file, then it simply appends a new empty HDU
     and writes the required keywords.  This allows space
     to be reserved for additional keywords in the header
     if desired.

   - added the ffchfl and ffcdfl routines to check the header and
     data fill values, for compatibility with the Fortran FITSIO
     library.

   - added the ffgsdt routine to return the system date
     for compatibility with the Fortran FITSIO library.

   - added a diagnostic error message (written to the error stack)
     if the routines that read data from image or column fail.

   - modified ffgclb so that it simply copies the bytes from 
     an ASCII 'nA' or 'An' format column into the user's byte
     array.  Previously, CFITSIO would return an error when 
     trying to read an 'A' column with ffgclb.

   - modified ffpclb so that it simply copies the input array 
     of bytes to an ASCII 'nA' or 'An' format column.
     Previously, CFITSIO would return an error when 
     trying to write to an 'A' column with ffpclb.

  Bug Fixes:

   - ffgkls was allocating one too few bytes when reading continued
     string keyword values. 

   - in testprog.c added code to properly free the memory that
     had been allocated for string arrays.

   - corrected typographical errors in the User's Guide.

Version 1.30 - 11 September 1997

   - major overhaul to support reading and writing FITS files
     in memory.   The new routines fits_set_mem_buff and 
     fits_write_mem_buff have been added to intialize and
     copy out the memory buffer, respectively.

   - added support for reading FITS files piped in on 'stdin'
     and piped out on 'stdout'.  Just specify the file name as '-'
     when opening or creating the FITS file.

   - added support for 64-bit SGI IRIX machines.  This required
     adding routines to pack and unpack 32-bit integers into
     64-bit integers.

   - cleaned up the code that supports G_FLOAT and IEEE_FLOAT
     on Alpha VMS systems.  Now, the type of float is determined
     at compile time, not run time.

  Bug Fixes:

   - replaced the malloc calls in the error message stack routines
     with a static fixed size array.  The malloc's cause more
     problems than they solved, and were prone to cause memory
     leaks if users don't clear the error message stack when
     closing the FITS file.

   - when writing float or double keywords, test that the value
     is not a special IEEE value such as a NaN.  Some
     compilers would write the string 'NaN' in this case into
     the output value string.

   - fixed bug in ffiblk, to ignore EOF status return if it is
     inserting blocks at the end of the file.

   - removed the 'l' from printf format string that is constructed
     in the ffcfmt routine.  This 'l' is non-standard and causes problems
     with the Metrowerks compiler on a Mac.

   - the default null value in images was mistakenly being set
     equal to NO_NULL = 314, rather than NULL_UNDEFINED = 1234554321
     in the ffgphd routine.

   - check status value in ffgkls to make sure the keyword exists
     before allocating memeory for the value string.

   - fixed the support for writing and reading unsigned long integer
     keyword values in ffpky and ffgky by internally treating
     the values as doubles.  This required changes to ffc2r and
     ffc2d as well.

   - added explicit cast to 'double' in one place in putcolb.c and
     6 places in pubcolui.c, to get rid of warning messages issued
     by one compiler.

   - in ffbinit and ffainit, it is necessary to test that tfield > 0
     before trying to allocate memory with calloc.  Otherwise, some
     compilers return a null pointer which CFITSIO interprets to 
     mean the memory allocation failed.

   - had to explicitly cast the null buffer pointer to a char
     pointer (cptr = (char *)buffer;) in 4 places in the buffers.c
     file to satisfy a picky C++ compiler.

   - changed the test for an ALPHA VMS system to see if
     '__VMS' is defined, rather than 'VMS'.  The latter
     is not defined by at least one C++ compiler.

   - modified ffpcls so that it can write a null string to
     a variable length string column, without going into
     an infinite loop.

   - fixed bug in ffgcfl that caused the 'next' variable to be
     incremented twice.

   - fixed bug in ffgcpr that caused it write 2x the number of
     complex elements into the descriptor when writing to
     a complex or double complex variable length array column.

   - added call to ffrdef at the end of ffrsim to ensure that
     the internal structures are updated to correspond to the
     modified header keywords

Version 1.25 - 7 July 1997

   - improved the efficiency of the ffiblk routine, when inserting
     more than one block into the file.

   - fixed bug in ffwend that in rare instances caused the beginning
     of the following extension to be overwritten by blank fill.

   - added new routine to modify the size of an existing primary
     array or image extension: fits_resize_img/ffrsim.

   - added support for null-valued keywords, e.g., keywords that
     have no defined value.  These keywords have an equal sign and
     space in columns 9-10, but have not value string.  Example:
     KEYNAME =                      / null-valued keyword
     Support for this feature required the following changes:
       - modified ffpsvc to return a null value string without error
       - modified ffc2[ilrd] to return error VALUE_UNDEFINED in this case
       - modified ffgkn[sljed] to continue reading additional keywords
         even if one or more keywords have undefined values.
       - added 4 new routines:  ffpkyu, ffikyu, ffmkyu, ffukyu to
         write, insert, modify, or update an undefined keyword

   - a new makefile.os2 file was added, for building CFITSIO
     on OS/2 systems.

   - modified ffgtkn so that if it finds an unexpected keyword
     name, the returned error status = BAD_ORDER instead of
     NOT_POS_INT.

   - added 2 new routines, fits_write_key_unit/ffpunt and
     fits_read_key_unit/ffgunt to write/read the physical
     units of a keyword value.  These routines use a local
     FITS convention for storing the units in square brackets
     following the '/' comment field separator, as in:
     VELOCITY=                   12 / [km/s] orbit speed 
     The testprog.c program was modified to test these
     new routines.

   - in the test of Alpha OSF/1 machines in fitsio2.h,
     change 'defined(unix)' to 'defined(__unix__)' which
     appears to be a more robust test.

   - remove test for linux environment variable from fitsio2.h

Version 1.24 - 2 May 1997

   - fixed bug in ffpbyt that incorrectly computed the current
     location in the FITS file when writing > 10000 bytes.

   - changed the datatype of the 'nbytes' parameter in ffpbyt 
     from 'int' to 'long'.   Made corresponding datatype change
     to some internal variables in ffshft.

   - changed '(unsigned short *)' to '(short *)' in getcolui.c, and
     changed '(unsigned long *)'  to '(long *)'  in getcoluj.c, to
     work around problem with the VAX/VMS cc compiler.

Version 1.23 - 24 April 1997

   - modified ffcins and ffdins (in editcol.c) to simply return 
     without error if there are no (zero) rows in the table.

Version 1.22 - 18 April 1997

   - fixed bug in ffgcpr that caused it to think that all values were
     undefined in ASCII tables columns that have TNULLn = '        '
     (i.e., the TNULLn keyword value is a string of blanks.

   - fixed bug in the ffgcl[bdeijk,ui,uj] family of routines
     when parsing a numeric value in an ASCII table.  The
     returned values would have the decimal place shifted to
     the left if the table field contained an explicit decimal
     point followed by blanks.  Example:  in an F5.2 column,
     the value '16.  ' would be returned as 0.16.  If the
     trailing zeros were present, then cfitsio returned the
     correct value (e.g.,  '16.00' returns 16.).

   - fixed another bug in the ffgcl[bdeijk,ui,uj] family of routines
     that caused them to misread values in an ASCII table in rows
     following an undefined value when all the values were read
     at once in a single call to the routine.

Version 1.21 - 26 March 1997

   - added general support for reading and writing unsigned integer
     keywords, images, and binary table column values.

   - fixed bug in the way the column number was used in ffgsve and
     similar routines.  This bug caused cfitsio to read (colnum - 1)
     rather than the desired column.

   - fixed a bug in ftgkls that prevented it from reading more than one
     continuation line of a long string keyword value.

   - fixed the definition of fits_write_longwarn in longnam.h

Version 1.20 - 29 Jan 1997

   - when creating a binary table with variable length vector columns, if the
     calling routine does not specify a value for the maximum length of
     the vector (e.g.,  TFORMn = '1PE(400)')  then cfitsio will automatically
     calculate the maximum value and append it to the TFORM value
     when the binary table is first closed.

   - added the set of routines to do coordinate system transformations

   - added support for wildcards ('*', '?', and '#') in the input
     keyword name when reading, modifying, or deleting keywords.

   - added new general keyword reading routine, ffgnxk, to return
     the next keyword whose name matches a list of template names,
     but does not match any names on a second template list.

   - modified ftgrec so that it simply moves to the beginning
     of the header if the input keyword number = 0

   - added check in ffdelt to make sure the input fits file pointer is
     not already null

   - added check in ffcopy to make sure the output HDU does not
     already contain any keywords (it must be empty).

   - modified ffgcls so that it does not test if each string column
     value equals the null string value if the null string value
     is longer than the width of the column.

   - fixed bug in ftgtdm that caused it to fail if the TDIMn 
     keyword did not exist in the FITS file

   - modified testprog.c to include tests of keyword wildcards
     and the WCS coordinate transformation routines.

   - added a test for 'EMX' in fitsio2.h so that cfitsio builds 
     correctly on a PC running OS/2.

Version 1.11 - 04 Dec 1996

   - modified the testprog.c program that is included with the
     distribution, so that the output FITS file is identical to
     that produced by the Fortran FITSIO test program.

   - changed all instances of the 'extname' variable to 'extnm'
     to avoid a conflict with the -Dextname switch in cfortran.h
     on HP machines.

   - in all the routines like ffi4fi1, which convert an array
     of values to integers just prior to writing them to the FITS
     file, the integer value is now rounded to the nearest integer
     rather than truncated. (ffi4fi1, ffi4fi2, ffi4fi4, etc)

   - changed ffgcfl (and hence ffgcl) so that the input value
     of the logical array element is not changed if the corresponding
     FITS value is undefined.

   - in ffgacl, the returned value of TBCOL was off by 1 (too small)

   - fixed the comment of EXTNAME keyword to read 'binary table'
     instead of 'ASCII table' in the header of binary tables.

Version 1.101 - 17 Nov 1996

   - Made major I/O efficiency improvements by adding internal buffers
     rather than directly reading or writing to disk.  Access to 
     columns in binary tables is now 50 - 150 times faster.  Access to
     FITS image is also slightly faster.

   - made significant speed improvements when reading numerical data
     in FITS ASCII tables by writing my own number parsing routines
     rather than using the sscanf C library routine.  This change
     requires that the -lm argument now be included when linking
     a program that calls cfitsio (under UNIX).

   - regrouped the source files into logically related sets of routines.
     The Makefile now runs much faster since every single routine is
     not split into a separate file.

   - now use the memcpy function, rather than a 'for' loop in several
     places for added efficiency

   - redesigned the low-level binary table read and write routines
     (ffpbytoff and ffgbytoff) for greater efficiency.

   - added a new error status: 103 = too many open FITS files.

   - added a 'extern "C"' statement around the function prototypes
     in fitsio.h, to support use of cfitsio by C++ compilers.

   - fixed routines for writing or reading fixed-length substrings
     within a binary table ASCII column, with TFORM values of
     of the form 'rAw' where 'r' is the total width of the ASCII
     column and 'w' is the width of a substring within the column.

   - no longer automatically rewrite the END card and following fill
     values if they are already correct.

   - all the 'get keyword value and comment' routines have been changed 
     so that the comment is not returned if the input pointer is NULL.

   - added new routine to return the optimum number of tables rows
     that should be read or written at one time for optimum efficiency.

   - modified the way numerical values in ASCII tables are parsed so
     that embedded spaces in the value are ignored, and implicit
     decimal points are now supported.   (e.g, the string '123E 12'
     in a 'E10.2' format column will be interpreted as 1.23 * 10**12).

   - modified ffpcl and ffgcl to support binary table columns of
     all datatype (added logical, bit, complex, and double complex)

   - when writing numerical data to ASCII table columns, the ffpcl_
     routines now return an overflow error if a value is too large
     to be expressed in the column format.

   - closed small memory leak in ffpcls.

   - initialized the 'incre' variable in ffgcpr to eliminate compiler warning.

Version 1.04 - 17 Sept 1996

   - added README.MacOS and cfitsio_mac.sit.hqx to the distribution
     to support the Mac platforms.

   - fixed bug in ffpdfl that caused an EOF error (107) when a program
     creats a new extention that is an exact multiple of 2880 bytes long,
     AND the program does not write a value to the last element
     in the table or image.

   - fixed bug in all the ffgsf* and ffgcv* routines which caused
     core dumps when reading null values in a table.

Version 1.03 - 20 August 1996

   - added full support for reading and writing the C 'int'
     data type.  This was a problem on Alpha/OSF where short,
     int, and long datatypes are 2, 4, and 8 bytes long, respectively.

   - cleaned up the code in the byte-swapping routines.

   - renamed the file 'longname.h' to 'longnam.h' to avoid conflict
     with a file with the same name in another unrelated package.

Version 1.02 - 15 August 1996

   - ffgtbp was not correctly reading the THEAP keyword, hence would
     not correctly read variable length data in binary tables if
     the heap was not at the default starting location (i.e., 
     starting immediately after the fixed length table).

   - now force the cbuff variable in ffpcl_ and ffgcl_ to be
     aligned on a double word boundary.  Non-alignment can
     cause program to crash on some systems.

Version 1.01 - 12 August 1996

   - initial public release
